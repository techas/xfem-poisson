function [pos,qun,qan] = circleNumericalAnalyticalFlux(r0,X,T,U,Uenr,levelSet,opts)
% [pos,qun,qan] = circleNumericalAnalyticalFlux(r0,X,T,U,Uenr,levelSet,opts)
%
% returns analytic and numerical normal flux on the interface for
% the circular problem with a disk on the middle and homogeneous dirichlet 
% boundary conditions
%
tol = opts.tolerance;
h = calcMinEdgeLength( X, T );
nPointsPerSegment = 5;

%% points to compute the flux
nPoints = 2*pi*r0 / h * nPointsPerSegment;
a = linspace(0,2*pi,nPoints)';
e = [sin(a) cos(a)];
pos = e*r0;

%% flux - solution of FE*
qu = FluxosX(X,T,levelSet,U,Uenr,pos,0,tol);

% remove zeros (generated by the tolerance)
ix = all(qu,2) == 0;
qu(ix,:) = [];
pos(ix,:) = [];
e(ix,:) = [];

qun = sum(qu.*e,2);

%% flux - analytic
qan = 2*r0*ones(size(qun));
